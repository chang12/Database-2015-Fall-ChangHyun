options
{
  static = true;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(SimpleDBMSParser)

import java.io.File;
import java.io.UnsupportedEncodingException;

// Import libraries from Berkeley DB
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;

import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;

public class SimpleDBMSParser
{
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;

  public static Environment myDbEnvironment = null;
  public static EnvironmentConfig envConfig;
  public static Database myDatabase = null;
  public static DatabaseConfig dbConfig;
  
  public static void main(String args[]) throws ParseException
  {
    /* OPENING DB */

    // Open Database Environment or if not, create one.
	envConfig = new EnvironmentConfig();
    envConfig.setAllowCreate(true);
    myDbEnvironment = new Environment(new File("db/"), envConfig);

    // Open Database or if not, create one.
	dbConfig = new DatabaseConfig();
    dbConfig.setAllowCreate(true);
    dbConfig.setSortedDuplicates(true);
    myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);
    
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);

    while (true)
    {
      try
      {
        System.out.print("DB_2015-12345> ");
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
      	System.out.println("Syntax error");
      	break;
      case PRINT_CREATE_TABLE:
      	System.out.println("\'CREATE TABLE\' requested");
      	break;
    }
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
}

TOKEN :
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
| < SIGN : "+" | "-" >
| < DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      System.exit(0);
    }
  ) 
}

void queryList() :
{
  int q;
}
{
  (
    q = query()
    < SEMICOLON >
    {
      System.out.print("DB_2015-12345> ");
      printMessage(q);
    }
  )+
}

int query() :
{
  int q;
}
{
  (
    createTableQuery()
    {
      q = PRINT_CREATE_TABLE;
    }
  )
  (
    {
      return q;
    }
  )
}

void createTableQuery() :
{
  String tableName;
}
{
  < CREATE_TABLE >
  tableName = tableName()
  tableElementList(tableName)
  {
    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundData = new DatabaseEntry();

    Cursor cursor = myDatabase.openCursor(null, null);

    cursor.getFirst(foundKey, foundData, LockMode.DEFAULT);

    do    {
      try {        String keyString = new String(foundKey.getData(), "UTF-8");
        String dataString = new String(foundData.getData(), "UTF-8");
        System.out.println(keyString);
        System.out.println(dataString);      } catch(UnsupportedEncodingException e) {
      }                  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);  }
}

void tableElementList(String tableName) :
{}
{
  < LEFT_PAREN >
  tableElement(tableName)
  (
    < COMMA >
    tableElement(tableName)
  )*
  < RIGHT_PAREN >
}

void tableElement(String tableName) :
{}
{
  columnDefinition(tableName)
| tableConstraintDefinition()
}

void columnDefinition(String tableName) :
{
  String attributeKey;
  String attributeValue;
  String columnName;
  String dataType;
}
{
  columnName = columnName()
  dataType = dataType()
  (
    < NOT_NULL >
    {
      dataType+=" notnull";    }
  )?
  {
    attributeKey = tableName+" "+columnName;
    attributeValue = dataType;
//    System.out.println(attributeKey);
//    System.out.println(attributeValue);

    Cursor cursor = null;
    DatabaseEntry key;
    DatabaseEntry value;

    try    {
      cursor = myDatabase.openCursor(null, null);
      key = new DatabaseEntry(attributeKey.getBytes("UTF-8"));
      value = new DatabaseEntry(attributeValue.getBytes("UTF-8"));
      cursor.put(key, value);    } catch(DatabaseException de)    {
      de.printStackTrace();    } catch(UnsupportedEncodingException e)    {
      e.printStackTrace();    }  }
}

void tableConstraintDefinition() :
{}
{
  primaryKeyConstraint()
| referentialConstraint()
}

void primaryKeyConstraint() :
{}
{
  < PRIMARY_KEY >
  columnNameList()
}

void referentialConstraint() :
{}
{
  < FOREIGN_KEY >
  columnNameList()
  < REFERENCES >
  tableName()
  columnNameList()
}

void columnNameList() :
{}
{
  < LEFT_PAREN >
  columnName()
  (
    < COMMA >
    columnName()
  )*
  < RIGHT_PAREN >
}

String dataType() :
{
  Token intValueToken;
}
{
  < INT >
  {
    return "int 0";  }
| (
    < CHAR >
    < LEFT_PAREN >
    intValueToken = < INT_VALUE >
    < RIGHT_PAREN >
    {
      return ("char "+Integer.parseInt(intValueToken.image));    }
  )
| < DATE >
  {
    return "date 0";  }
}

String tableName() :
{
  Token tableName;
}
{
  tableName=< LEGAL_IDENTIFIER >
  {
    return tableName.image;  }
}

String columnName() :
{
  Token columnName;
}
{
  columnName=< LEGAL_IDENTIFIER >
  {
    return columnName.image;  }
}
