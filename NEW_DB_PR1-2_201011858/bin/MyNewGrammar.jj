options
{
  static = true;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(SimpleDBMSParser)

import java.io.File;
import java.io.UnsupportedEncodingException;

// Import libraries from Berkeley DB
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;

import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;

public class SimpleDBMSParser
{
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;

  public static String errorMsg;
  public static String currentTableName;

  public static Environment myDbEnvironment = null;
  public static EnvironmentConfig envConfig;
  public static Database myDatabase = null;
  public static DatabaseConfig dbConfig;
  
  public static void main(String args[]) throws ParseException
  {
    /* OPENING DB */

    // Open Database Environment or if not, create one.
	envConfig = new EnvironmentConfig();
    envConfig.setAllowCreate(true);
    myDbEnvironment = new Environment(new File("db/"), envConfig);

    // Open Database or if not, create one.
	dbConfig = new DatabaseConfig();
    dbConfig.setAllowCreate(true);
    dbConfig.setSortedDuplicates(false);
//    myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);
    
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);

    while (true)
    {
      try
      {
        System.out.print("DB_2010-11858> ");
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
      	if(myDatabase != null)
      	{
      	  String databaseName = myDatabase.getDatabaseName();
      	  System.out.println("db: "+myDatabase);
      	  System.out.println("name: "+databaseName);
      	  myDatabase.close();
      	  myDbEnvironment.removeDatabase(null, databaseName);
      	}
      	System.out.println("Syntax error");
      	break;
      case PRINT_CREATE_TABLE:
      	if(errorMsg=="")      	{
      	  myDatabase = myDbEnvironment.openDatabase(null, "@TABLELIST", dbConfig);
      	  putKeyValue(currentTableName, currentTableName);
      	  myDatabase.close();      	  System.out.println("\'"+currentTableName+"\' table is created");
      	}
      	else      	{
      	  System.out.println(errorMsg);
      	  myDbEnvironment.removeDatabase(null, "@TEMP");      	}
      	break;
    }
  }

  static public boolean findKeyValue(String keyString)
  {
    Cursor cursor = null;
    cursor = myDatabase.openCursor(null, null);
		
	DatabaseEntry foundKey;
	DatabaseEntry foundValue;
		
	boolean result = false;
			
	try{
		foundKey = new DatabaseEntry(keyString.getBytes("UTF-8"));
		foundValue = new DatabaseEntry();
		
		if(cursor.getSearchKey(foundKey, foundValue, LockMode.DEFAULT)==OperationStatus.SUCCESS){
			result = true;
		}
		else{
			result = false;
		}
		
	} catch(DatabaseException de){
		de.printStackTrace();
	} catch(UnsupportedEncodingException e){
		e.printStackTrace();
	}

	cursor.close();
	return result;  }
  
  static public void putKeyValue(String keyString, String valueString)
  {
    Cursor cursor = null;
    cursor = myDatabase.openCursor(null, null);
		
	DatabaseEntry key;
	DatabaseEntry value;
		
	boolean result = false;
			
	try{
	  key = new DatabaseEntry(keyString.getBytes("UTF-8"));
	  value = new DatabaseEntry(valueString.getBytes("UTF-8"));
	  cursor.put(key, value);
		
	} catch(DatabaseException de){
	  de.printStackTrace();
	} catch(UnsupportedEncodingException e){
	  e.printStackTrace();
	}

	cursor.close();
  }

  static public boolean pkColumnValidation(String tableName, String columnNameList)
  {
    String columnName;
    String[] columnNameListArray = columnNameList.split(" ");
    int columnNameListLength = columnNameListArray.length;
    boolean result = true;

    for(int i=0;i<columnNameListLength;i++)    {
      columnName = columnNameListArray[i];
      if(!findKeyValue(tableName+" "+columnName))
      {
        result = false;
        addErrorMsg("Create table has failed: \'"+columnName+"\' does not exists in column definition");      }    }

    return result;  }

  static public void deletePair(String tableName)
  {
    Cursor cursor = null;
    cursor = myDatabase.openCursor(null, null);

    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundValue = new DatabaseEntry();

    cursor.getFirst(foundKey, foundValue, LockMode.DEFAULT);

    do    {
      try {
        String keyString = new String(foundKey.getData(), "UTF-8");
      	String valueString = new String(foundValue.getData(), "UTF-8");

      	if (keyString.split(" ")[0].equals(tableName))
      	{
      	  cursor.delete();
      	}      } catch(UnsupportedEncodingException e){
        e.printStackTrace();      }
    } while (cursor.getNext(foundKey, foundValue, LockMode.DEFAULT) == OperationStatus.SUCCESS);  }

  static public void addErrorMsg(String msg)
  {
    if(errorMsg=="")
    {
      errorMsg = msg;    }  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
}

TOKEN :
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
| < SIGN : "+" | "-" >
| < INT_VALUE : (< SIGN >)? (["0"-"9"])+ >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      if (myDatabase != null) myDatabase.close();
      if (myDbEnvironment != null) myDbEnvironment.close();
      System.exit(0);
    }
  ) 
}

void queryList() :
{
  int q;
}
{
  (
    q = query()
    < SEMICOLON >
    {
      System.out.print("DB_2010-11858> ");
      printMessage(q);
    }
  )+
}

int query() :
{
  int q;
}
{
  (
    createTableQuery()
    {
      q = PRINT_CREATE_TABLE;    }
  )
  (
    {
      return q;
    }
  )
}

void createTableQuery() :
{
  String tableName;
  boolean result;
}
{
  < CREATE_TABLE >
  tableName = tableName()
  {
    errorMsg = "";
  	currentTableName = "";
  	myDatabase = myDbEnvironment.openDatabase(null, "@TABLELIST", dbConfig);

    if(findKeyValue(tableName))
    {
      addErrorMsg("Create table has failed: table with the same name already exists");
      myDatabase.close();
      myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);    }
    else
    {
//      putKeyValue(tableName, tableName);
      myDatabase.close();
      myDatabase = myDbEnvironment.openDatabase(null, tableName, dbConfig);    }
      }
  tableElementList(tableName)
  {
    currentTableName = tableName;
    myDatabase.close();  }
}

void tableElementList(String tableName) :
{}
{
  < LEFT_PAREN >
  tableElement(tableName)
  (
    < COMMA >
    tableElement(tableName)
  )*
  < RIGHT_PAREN >
}

void tableElement(String tableName) :
{}
{
  columnDefinition(tableName)
| tableConstraintDefinition(tableName)
}

void columnDefinition(String tableName) :
{
  String attributeKey;
  String attributeValue;
  String columnName;
  String dataType;
  String databaseName;

  boolean result;
}
{
  columnName = columnName()
  dataType = dataType()
  (
    < NOT_NULL >
    {
      dataType+=" notnull";    }
  )?
  {
    attributeKey = tableName+" "+columnName;
    attributeValue = dataType;

    if(findKeyValue(attributeKey))    {
      addErrorMsg("Create table has failed: column definition is duplicated");
      databaseName = myDatabase.getDatabaseName();
      myDatabase.close();
      myDbEnvironment.renameDatabase(null, databaseName, "@TEMP");
      myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);    }    else    {
      putKeyValue(attributeKey, attributeValue);    }  }
}

void tableConstraintDefinition(String tableName) :
{}
{
  primaryKeyConstraint(tableName)
| referentialConstraint()
}

void primaryKeyConstraint(String tableName) :
{
  String columnNameList;
  String databaseName;
}
{
  < PRIMARY_KEY >
  columnNameList = columnNameList()
  {
    if(findKeyValue(tableName+" PK"))
    {
      addErrorMsg("Create table has failed: primary key definition is duplicated");
      databaseName = myDatabase.getDatabaseName();
      myDatabase.close();
      myDbEnvironment.renameDatabase(null, databaseName, "@TEMP");
      myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);    }
    else
    {
      if(pkColumnValidation(tableName, columnNameList))
      {
        putKeyValue(tableName+" PK", columnNameList);      }
      else
      {
        databaseName = myDatabase.getDatabaseName();
      	myDatabase.close();
      	myDbEnvironment.renameDatabase(null, databaseName, "@TEMP");
      	myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);      }    }  }
}

void referentialConstraint() :
{}
{
  < FOREIGN_KEY >
  columnNameList()
  < REFERENCES >
  tableName()
  columnNameList()
}

String columnNameList() :
{
  String columnNameList = "";
  String columnName;
}
{
  < LEFT_PAREN >
  columnName = columnName()
  {
    columnNameList += (columnName+" ");  }
  (
    < COMMA >
    columnName = columnName()
    {
      columnNameList += (columnName+" ");    }
  )*
  < RIGHT_PAREN >
  {
    return columnNameList;  }
}

String dataType() :
{
  Token intValueToken;
  int intValue;
  String databaseName;
}
{
  < INT >
  {
    return "int 0";  }
| (
    < CHAR >
    < LEFT_PAREN >
	intValueToken = < INT_VALUE >
    < RIGHT_PAREN >
    {
      intValue = Integer.parseInt(intValueToken.image);
      if(intValue<1)      {
        addErrorMsg("Char length should be > 0");
        databaseName = myDatabase.getDatabaseName();
      	myDatabase.close();
      	myDbEnvironment.renameDatabase(null, databaseName, "@TEMP");
      	myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);      }
      return ("char "+intValue);    }
  )
| < DATE >
  {
    return "date 0";  }
}

String tableName() :
{
  Token tableName;
}
{
  tableName=< LEGAL_IDENTIFIER >
  {
    return tableName.image;  }
}

String columnName() :
{
  Token columnName;
}
{
  columnName=< LEGAL_IDENTIFIER >
  {
    return columnName.image;  }
}
