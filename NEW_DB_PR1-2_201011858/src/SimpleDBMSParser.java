/* Generated By:JavaCC: Do not edit this line. SimpleDBMSParser.java */
import java.io.File;
import java.io.UnsupportedEncodingException;

// Import libraries from Berkeley DB
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;

import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;

public class SimpleDBMSParser implements SimpleDBMSParserConstants {
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;

  public static String errorMsg;
  public static String currentTableName;

  public static Environment myDbEnvironment = null;
  public static EnvironmentConfig envConfig;
  public static Database myDatabase = null;
  public static DatabaseConfig dbConfig;

  public static void main(String args[]) throws ParseException
  {
    /* OPENING DB */

    // Open Database Environment or if not, create one.
        envConfig = new EnvironmentConfig();
    envConfig.setAllowCreate(true);
    myDbEnvironment = new Environment(new File("db/"), envConfig);

    // Open Database or if not, create one.
        dbConfig = new DatabaseConfig();
    dbConfig.setAllowCreate(true);
    dbConfig.setSortedDuplicates(false);
//    myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);

    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);

    while (true)
    {
      try
      {
        System.out.print("DB_2010-11858> ");
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
        if(myDatabase != null)
        {
          String databaseName = myDatabase.getDatabaseName();
          System.out.println("db: "+myDatabase);
          System.out.println("name: "+databaseName);
          myDatabase.close();
          myDbEnvironment.removeDatabase(null, databaseName);
        }
        System.out.println("Syntax error");
        break;
      case PRINT_CREATE_TABLE:
        if(errorMsg=="")
        {
          myDatabase = myDbEnvironment.openDatabase(null, "@TABLELIST", dbConfig);
          putKeyValue(currentTableName, currentTableName);
          myDatabase.close();
          System.out.println("\u005c'"+currentTableName+"\u005c' table is created");
        }
        else
        {
          System.out.println(errorMsg);
          myDbEnvironment.removeDatabase(null, "@TEMP");
        }
        break;
    }
  }

  static public boolean findKeyValue(String keyString)
  {
    Cursor cursor = null;
    cursor = myDatabase.openCursor(null, null);

        DatabaseEntry foundKey;
        DatabaseEntry foundValue;

        boolean result = false;

        try{
                foundKey = new DatabaseEntry(keyString.getBytes("UTF-8"));
                foundValue = new DatabaseEntry();

                if(cursor.getSearchKey(foundKey, foundValue, LockMode.DEFAULT)==OperationStatus.SUCCESS){
                        result = true;
                }
                else{
                        result = false;
                }

        } catch(DatabaseException de){
                de.printStackTrace();
        } catch(UnsupportedEncodingException e){
                e.printStackTrace();
        }

        cursor.close();
        return result;
  }

  static public void putKeyValue(String keyString, String valueString)
  {
    Cursor cursor = null;
    cursor = myDatabase.openCursor(null, null);

        DatabaseEntry key;
        DatabaseEntry value;

        boolean result = false;

        try{
          key = new DatabaseEntry(keyString.getBytes("UTF-8"));
          value = new DatabaseEntry(valueString.getBytes("UTF-8"));
          cursor.put(key, value);

        } catch(DatabaseException de){
          de.printStackTrace();
        } catch(UnsupportedEncodingException e){
          e.printStackTrace();
        }

        cursor.close();
  }

  static public boolean pkColumnValidation(String tableName, String columnNameList)
  {
    String columnName;
    String[] columnNameListArray = columnNameList.split(" ");
    int columnNameListLength = columnNameListArray.length;
    boolean result = true;

    for(int i=0;i<columnNameListLength;i++)
    {
      columnName = columnNameListArray[i];
      if(!findKeyValue(tableName+" "+columnName))
      {
        result = false;
        addErrorMsg("Create table has failed: \u005c'"+columnName+"\u005c' does not exists in column definition");
      }
    }

    return result;
  }

  static public void deletePair(String tableName)
  {
    Cursor cursor = null;
    cursor = myDatabase.openCursor(null, null);

    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundValue = new DatabaseEntry();

    cursor.getFirst(foundKey, foundValue, LockMode.DEFAULT);

    do
    {
      try {
        String keyString = new String(foundKey.getData(), "UTF-8");
        String valueString = new String(foundValue.getData(), "UTF-8");

        if (keyString.split(" ")[0].equals(tableName))
        {
          cursor.delete();
        }
      } catch(UnsupportedEncodingException e){
        e.printStackTrace();
      }

    } while (cursor.getNext(foundKey, foundValue, LockMode.DEFAULT) == OperationStatus.SUCCESS);
  }

  static public void addErrorMsg(String msg)
  {
    if(errorMsg=="")
    {
      errorMsg = msg;
    }
  }

  static final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
      queryList();
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
      if (myDatabase != null) myDatabase.close();
      if (myDbEnvironment != null) myDbEnvironment.close();
      System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void queryList() throws ParseException {
  int q;
    label_1:
    while (true) {
      q = query();
      jj_consume_token(SEMICOLON);
      System.out.print("DB_2010-11858> ");
      printMessage(q);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE_TABLE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  static final public int query() throws ParseException {
  int q;
    createTableQuery();
      q = PRINT_CREATE_TABLE;
      {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  static final public void createTableQuery() throws ParseException {
  String tableName;
  boolean result;
    jj_consume_token(CREATE_TABLE);
    tableName = tableName();
    errorMsg = "";
        currentTableName = "";
        myDatabase = myDbEnvironment.openDatabase(null, "@TABLELIST", dbConfig);

    if(findKeyValue(tableName))
    {
      addErrorMsg("Create table has failed: table with the same name already exists");
      myDatabase.close();
      myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);
    }
    else
    {
//      putKeyValue(tableName, tableName);
      myDatabase.close();
      myDatabase = myDbEnvironment.openDatabase(null, tableName, dbConfig);
    }
    tableElementList(tableName);
    currentTableName = tableName;
    myDatabase.close();
  }

  static final public void tableElementList(String tableName) throws ParseException {
    jj_consume_token(LEFT_PAREN);
    tableElement(tableName);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      tableElement(tableName);
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void tableElement(String tableName) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
      columnDefinition(tableName);
      break;
    case PRIMARY_KEY:
    case FOREIGN_KEY:
      tableConstraintDefinition(tableName);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void columnDefinition(String tableName) throws ParseException {
  String attributeKey;
  String attributeValue;
  String columnName;
  String dataType;
  String databaseName;

  boolean result;
    columnName = columnName();
    dataType = dataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_NULL:
      jj_consume_token(NOT_NULL);
      dataType+=" notnull";
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    attributeKey = tableName+" "+columnName;
    attributeValue = dataType;

    if(findKeyValue(attributeKey))
    {
      addErrorMsg("Create table has failed: column definition is duplicated");
      databaseName = myDatabase.getDatabaseName();
      myDatabase.close();
      myDbEnvironment.renameDatabase(null, databaseName, "@TEMP");
      myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);
    }
    else
    {
      putKeyValue(attributeKey, attributeValue);
    }
  }

  static final public void tableConstraintDefinition(String tableName) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY_KEY:
      primaryKeyConstraint(tableName);
      break;
    case FOREIGN_KEY:
      referentialConstraint();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primaryKeyConstraint(String tableName) throws ParseException {
  String columnNameList;
  String databaseName;
    jj_consume_token(PRIMARY_KEY);
    columnNameList = columnNameList();
    if(findKeyValue(tableName+" PK"))
    {
      addErrorMsg("Create table has failed: primary key definition is duplicated");
      databaseName = myDatabase.getDatabaseName();
      myDatabase.close();
      myDbEnvironment.renameDatabase(null, databaseName, "@TEMP");
      myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);
    }
    else
    {
      if(pkColumnValidation(tableName, columnNameList))
      {
        putKeyValue(tableName+" PK", columnNameList);
      }
      else
      {
        databaseName = myDatabase.getDatabaseName();
        myDatabase.close();
        myDbEnvironment.renameDatabase(null, databaseName, "@TEMP");
        myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);
      }
    }
  }

  static final public void referentialConstraint() throws ParseException {
    jj_consume_token(FOREIGN_KEY);
    columnNameList();
    jj_consume_token(REFERENCES);
    tableName();
    columnNameList();
  }

  static final public String columnNameList() throws ParseException {
  String columnNameList = "";
  String columnName;
    jj_consume_token(LEFT_PAREN);
    columnName = columnName();
    columnNameList += (columnName+" ");
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      columnName = columnName();
      columnNameList += (columnName+" ");
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return columnNameList;}
    throw new Error("Missing return statement in function");
  }

  static final public String dataType() throws ParseException {
  Token intValueToken;
  int intValue;
  String databaseName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
    {if (true) return "int 0";}
      break;
    case CHAR:
      jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      intValueToken = jj_consume_token(INT_VALUE);
      jj_consume_token(RIGHT_PAREN);
      intValue = Integer.parseInt(intValueToken.image);
      if(intValue<1)
      {
        addErrorMsg("Char length should be > 0");
        databaseName = myDatabase.getDatabaseName();
        myDatabase.close();
        myDbEnvironment.renameDatabase(null, databaseName, "@TEMP");
        myDatabase = myDbEnvironment.openDatabase(null, "@TEMP", dbConfig);
      }
      {if (true) return ("char "+intValue);}
      break;
    case DATE:
      jj_consume_token(DATE);
    {if (true) return "date 0";}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String tableName() throws ParseException {
  Token tableName;
    tableName = jj_consume_token(LEGAL_IDENTIFIER);
    {if (true) return tableName.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String columnName() throws ParseException {
  Token columnName;
    columnName = jj_consume_token(LEGAL_IDENTIFIER);
    {if (true) return columnName.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleDBMSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x220,0x200,0x20000,0x201800,0x400,0x1800,0x20000,0x1c0,};
   }

  /** Constructor with InputStream. */
  public SimpleDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleDBMSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleDBMSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleDBMSParser(SimpleDBMSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
